{"cells":[{"kind":2,"language":"javascript","value":"let local = icblast({local:true})\nlet can = await local(\"bkyz2-fmaaa-aaaaa-qaaaq-cai\");\n\nawait can.getPairVolumes().then(log)\nglobal({can})\n"},{"kind":2,"language":"javascript","value":"let now = BigInt(Date.now()) * 1_000_000n; // in nanoseconds\nlet minute = 60n * 1_000_000_000n;\n\nasync function testRecords(times, expected_volume24, expected_volume_total) {\n    let pairid = \"pair\" + Math.random();\n    // Time during tests has to always increment. Can't put older records before newer ones.\n    let records = [];\n\n    for (let i = 0; i < times.length; i++) {\n        let time = times[i];\n        let volume = 1;\n        let record = [pairid, now - BigInt(time) * minute, volume];\n        records.push(record);\n    };\n    \n    await can.testUpdateVolume(records)\n\n    let data = await can.getPairVolumes();\n    let mydata = data.find(x => x[0] == pairid);\n    let err = \"\";\n    if (mydata[1] != expected_volume24) err += \"24h volume is wrong \"+mydata[1]+\" expected \"+expected_volume24;\n    if (mydata[2] != expected_volume_total) err += \"| Total volume is wrong \"+mydata[2]+\" expected \"+expected_volume_total;\n    if (err == \"\") log(\"Test passed\"); else log(err);\n}\n\nlet day = 60 * 24;\nlet hour = 60;\n\n// Test if a single trade exactly 23h59m ago is counted.\nawait testRecords([23 * 60 - 1], 1, 1);\n\n// Test if a single trade exactly 24h ago is not counted.\nawait testRecords([24 * 60], 0, 1);\n\n// Test if a single trade exactly 25h01m hours ago is not counted.\nawait testRecords([24 * 60 + 1], 0, 1);\n\n// Ensure correct volume calculation for trades spread over several hours.\nawait testRecords([23 * 60, 22 * 60, 20 * 60], 3, 3);\n\n// Confirm that a trade just beyond 24 hours is not included.\nawait testRecords([25 * 60], 0, 1);\n\n// Ensure accuracy with trades happening in rapid succession and many at the same time\nawait testRecords([5, 4, 3, 2, 1,1,1,1,1,1], 10, 10);\n\n// Check how the system handles trades over a span of multiple days.\nawait testRecords([4319, 2323, 123], 1, 3);\n\n// Verify if the system correctly adds volumes of back-to-back trades within the same hour.\nawait testRecords([30, 20, 10], 3, 3);\n\n// Test if trades at the start and end of the 24-hour window are both included.\nawait testRecords([24 * 60 - 1, 0], 2, 2);\n\n// Test for a single trade in the last minute of the 24-hour window.\nawait testRecords([1], 1, 1);\n\n// Check system's behavior with a single trade in the first minute of the 24-hour window.\nawait testRecords([24 * 60 - 1], 1, 1);\n\n// Test behavior with trades occurring every hour on the hour for 24 hours.\nawait testRecords(Array.from({length: 24}, (_, i) => 24 * 60 - (i + 1) * 60), 24, 24);\n\n// Ensure the system correctly tracks trades that occur in the first and last minutes of the day.\nawait testRecords([1439, 0], 2, 2);\n\n// Test the system with a high volume trade scenario.\nawait testRecords([90, 60, 30], 3, 3);\n\n// Verify the system's shifting the window properly \nawait testRecords([12 * 3 * 60 -1, 12 * 2 * 60 -1, 12 * 1 * 60 -1], 2, 3);\n\n// Few days ago shouldnt count in volume 24\nawait testRecords([12 * 3 * 60 -3, 12 * 3 * 60 -2, 12 * 3 * 60 -1], 0, 3);\n\nawait testRecords([3*day, 3*day, 2*day-1, 1*day-1, 1*day-2 ,1*day - 120, 1*day - 60*5, 1,1,1,1], 8, 11);\n\nawait testRecords([320*day, 3*day, 2*day-1, 2*day-1, 2*day-2 ], 0, 5);\nawait testRecords([320*day, 3*day, 2*day-1, 2*day-1, 2*day-2, day/2], 1, 6);\nawait testRecords([320*day, day/2], 1, 2);\nawait testRecords([25 * 60 -1, 23 * 60 -1 ,1,1,1], 4, 5);\nawait testRecords([12 * 3 * 60 -1, 1,1,1,1], 4, 5);\n\n// Add every hour\nawait testRecords([hour*24, hour*23, hour*22, hour*21, hour*20, hour*19, hour*18, hour*17, hour*16, hour*15, hour*14, hour*13, hour*12, hour*11, hour*10, hour*9, hour*8, hour*7, hour*6, hour*5, hour*4, hour*3,hour*2,hour, hour-1], 24, 25);\n\n// Test for every 30 minutes for 64 hours\nconst testEvery30MinFor64Hours = Array.from({ length: 128 }, (_, index) => 64 * hour - 30 * index);\nawait testRecords(testEvery30MinFor64Hours, 46, 128);\n\n// Test for every 2 hours for 7 days\nconst testEvery2HoursFor7Days = Array.from({ length: 84 }, (_, index) => 7 * 24 * hour - 2 * hour * index);\nawait testRecords(testEvery2HoursFor7Days, 11, 84);\n"}]}